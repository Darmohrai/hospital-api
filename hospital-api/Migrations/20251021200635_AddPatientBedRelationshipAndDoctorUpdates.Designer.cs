// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hospital_api.Data;

#nullable disable

namespace hospital_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021200635_AddPatientBedRelationshipAndDoctorUpdates")]
    partial class AddPatientBedRelationshipAndDoctorUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("hospital_api.Models.ClinicAggregate.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("hospital_api.Models.LaboratoryAggregate.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Profile")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("hospital_api.Models.OperationsAggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardiologistId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DentistId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("GynecologistId")
                        .HasColumnType("integer");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFatal")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurgeonId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardiologistId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DentistId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("GynecologistId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SurgeonId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("hospital_api.Models.PatientAggregate.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDoctorId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.DoctorAssignment", b =>
                {
                    b.Property<int>("DoctorAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorAssignmentId"));

                    b.Property<int?>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsConsulting")
                        .HasColumnType("boolean");

                    b.HasKey("DoctorAssignmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("DoctorAssignments");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("StaffId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("WorkExperienceYears")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Staffs", (string)null);

                    b.HasDiscriminator<string>("StaffType").HasValue("Staff");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Doctor", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Staff");

                    b.Property<int>("AcademicDegree")
                        .HasColumnType("integer");

                    b.Property<int>("AcademicTitle")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.SupportStaff", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Staff");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("SupportStaff");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Cardiologist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("FatalOperationCount")
                        .HasColumnType("integer");

                    b.Property<int>("OperationCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Cardiologist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Dentist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("FatalOperationCount")
                        .HasColumnType("integer");

                    b.Property<float>("HazardPayCoefficient")
                        .HasColumnType("real");

                    b.Property<int>("OperationCount")
                        .HasColumnType("integer");

                    b.ToTable("Staffs", t =>
                        {
                            t.Property("FatalOperationCount")
                                .HasColumnName("Dentist_FatalOperationCount");

                            t.Property("OperationCount")
                                .HasColumnName("Dentist_OperationCount");
                        });

                    b.HasDiscriminator().HasValue("Dentist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Gynecologist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("FatalOperationCount")
                        .HasColumnType("integer");

                    b.Property<int>("OperationCount")
                        .HasColumnType("integer");

                    b.ToTable("Staffs", t =>
                        {
                            t.Property("FatalOperationCount")
                                .HasColumnName("Gynecologist_FatalOperationCount");

                            t.Property("OperationCount")
                                .HasColumnName("Gynecologist_OperationCount");
                        });

                    b.HasDiscriminator().HasValue("Gynecologist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Neurologist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("ExtendedVacationDays")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Neurologist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Ophthalmologist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("ExtendedVacationDays")
                        .HasColumnType("integer");

                    b.ToTable("Staffs", t =>
                        {
                            t.Property("ExtendedVacationDays")
                                .HasColumnName("Ophthalmologist_ExtendedVacationDays");
                        });

                    b.HasDiscriminator().HasValue("Ophthalmologist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Radiologist", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("ExtendedVacationDays")
                        .HasColumnType("integer");

                    b.Property<float>("HazardPayCoefficient")
                        .HasColumnType("real");

                    b.ToTable("Staffs", t =>
                        {
                            t.Property("ExtendedVacationDays")
                                .HasColumnName("Radiologist_ExtendedVacationDays");

                            t.Property("HazardPayCoefficient")
                                .HasColumnName("Radiologist_HazardPayCoefficient");
                        });

                    b.HasDiscriminator().HasValue("Radiologist");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Surgeon", b =>
                {
                    b.HasBaseType("hospital_api.Models.StaffAggregate.Doctor");

                    b.Property<int>("FatalOperationCount")
                        .HasColumnType("integer");

                    b.Property<int>("OperationCount")
                        .HasColumnType("integer");

                    b.ToTable("Staffs", t =>
                        {
                            t.Property("FatalOperationCount")
                                .HasColumnName("Surgeon_FatalOperationCount");

                            t.Property("OperationCount")
                                .HasColumnName("Surgeon_OperationCount");
                        });

                    b.HasDiscriminator().HasValue("Surgeon");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hospital_api.Models.ClinicAggregate.Clinic", b =>
                {
                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany("Clinics")
                        .HasForeignKey("HospitalId");

                    b.HasOne("hospital_api.Models.LaboratoryAggregate.Laboratory", null)
                        .WithMany("Clinics")
                        .HasForeignKey("LaboratoryId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Bed", b =>
                {
                    b.HasOne("hospital_api.Models.PatientAggregate.Patient", "Patient")
                        .WithOne("Bed")
                        .HasForeignKey("hospital_api.Models.HospitalAggregate.Bed", "PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("hospital_api.Models.HospitalAggregate.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Building", b =>
                {
                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany("Buildings")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Department", b =>
                {
                    b.HasOne("hospital_api.Models.HospitalAggregate.Building", "Building")
                        .WithMany("Departments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", null)
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Hospital", b =>
                {
                    b.HasOne("hospital_api.Models.LaboratoryAggregate.Laboratory", null)
                        .WithMany("Hospitals")
                        .HasForeignKey("LaboratoryId");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Room", b =>
                {
                    b.HasOne("hospital_api.Models.HospitalAggregate.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("hospital_api.Models.OperationsAggregate.Operation", b =>
                {
                    b.HasOne("hospital_api.Models.StaffAggregate.DoctorAggregate.Cardiologist", null)
                        .WithMany("Operations")
                        .HasForeignKey("CardiologistId");

                    b.HasOne("hospital_api.Models.ClinicAggregate.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("hospital_api.Models.StaffAggregate.DoctorAggregate.Dentist", null)
                        .WithMany("Operations")
                        .HasForeignKey("DentistId");

                    b.HasOne("hospital_api.Models.StaffAggregate.Staff", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Models.StaffAggregate.DoctorAggregate.Gynecologist", null)
                        .WithMany("Operations")
                        .HasForeignKey("GynecologistId");

                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId");

                    b.HasOne("hospital_api.Models.PatientAggregate.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Models.StaffAggregate.DoctorAggregate.Surgeon", null)
                        .WithMany("Operations")
                        .HasForeignKey("SurgeonId");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("hospital_api.Models.PatientAggregate.Patient", b =>
                {
                    b.HasOne("hospital_api.Models.StaffAggregate.Staff", "AssignedDoctor")
                        .WithMany()
                        .HasForeignKey("AssignedDoctorId");

                    b.HasOne("hospital_api.Models.ClinicAggregate.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId");

                    b.Navigation("AssignedDoctor");

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.DoctorAssignment", b =>
                {
                    b.HasOne("hospital_api.Models.ClinicAggregate.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("hospital_api.Models.StaffAggregate.Doctor", "Doctor")
                        .WithMany("Assignments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Employment", b =>
                {
                    b.HasOne("hospital_api.Models.ClinicAggregate.Clinic", "Clinic")
                        .WithMany("Employments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hospital_api.Models.HospitalAggregate.Hospital", "Hospital")
                        .WithMany("Employments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hospital_api.Models.StaffAggregate.Staff", "Staff")
                        .WithMany("Employments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("hospital_api.Models.ClinicAggregate.Clinic", b =>
                {
                    b.Navigation("Employments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Building", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Department", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Hospital", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Clinics");

                    b.Navigation("Departments");

                    b.Navigation("Employments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("hospital_api.Models.HospitalAggregate.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("hospital_api.Models.LaboratoryAggregate.Laboratory", b =>
                {
                    b.Navigation("Clinics");

                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("hospital_api.Models.PatientAggregate.Patient", b =>
                {
                    b.Navigation("Bed");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Staff", b =>
                {
                    b.Navigation("Employments");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.Doctor", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Cardiologist", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Dentist", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Gynecologist", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("hospital_api.Models.StaffAggregate.DoctorAggregate.Surgeon", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
